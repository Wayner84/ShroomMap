{"version":3,"file":"suitabilityWorker-BQsNZnxp.js","sources":["../src/scoring/landcover.ts","../src/scoring/moisture.ts","../src/scoring/organicCarbon.ts","../src/scoring/ph.ts","../src/scoring/texture.ts","../src/scoring/index.ts","../src/scoring/average.ts","../src/workers/suitabilityWorker.ts"],"sourcesContent":["export const enum LandClass {\r\n  Poor = 0,\r\n  Caution = 1,\r\n  Ideal = 2\r\n}\r\n\r\nconst IDEAL_CODES = new Set([20, 30, 100]);\r\nconst CAUTION_CODES = new Set([90, 95]);\r\nconst AVOID_CODES = new Set([40, 50, 60, 70, 80]);\r\nexport const WOODLAND_CODE = 10;\r\n\r\nexport function deriveLandCoverClasses(codes: Uint8Array, width: number, height: number): Uint8Array {\r\n  const classes = new Uint8Array(width * height);\r\n\r\n  for (let idx = 0; idx < codes.length; idx += 1) {\r\n    const code = codes[idx];\r\n    if (IDEAL_CODES.has(code)) {\r\n      classes[idx] = LandClass.Ideal;\r\n    } else if (AVOID_CODES.has(code)) {\r\n      classes[idx] = LandClass.Poor;\r\n    } else if (code === WOODLAND_CODE) {\r\n      classes[idx] = LandClass.Caution;\r\n    } else if (CAUTION_CODES.has(code)) {\r\n      classes[idx] = LandClass.Caution;\r\n    } else {\r\n      classes[idx] = LandClass.Caution;\r\n    }\r\n  }\r\n\r\n  // Promote woodland edges that neighbour ideal clearings.\r\n  for (let y = 0; y < height; y += 1) {\r\n    for (let x = 0; x < width; x += 1) {\r\n      const idx = y * width + x;\r\n      if (codes[idx] !== WOODLAND_CODE) {\r\n        continue;\r\n      }\r\n      let neighbourIdeal = false;\r\n      for (let ny = Math.max(0, y - 1); ny <= Math.min(height - 1, y + 1) && !neighbourIdeal; ny += 1) {\r\n        for (let nx = Math.max(0, x - 1); nx <= Math.min(width - 1, x + 1); nx += 1) {\r\n          if (nx === x && ny === y) {\r\n            continue;\r\n          }\r\n          const nIdx = ny * width + nx;\r\n          if (classes[nIdx] === LandClass.Ideal) {\r\n            neighbourIdeal = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      if (neighbourIdeal) {\r\n        classes[idx] = LandClass.Ideal;\r\n      }\r\n    }\r\n  }\r\n\r\n  return classes;\r\n}\r\n","export function scoreMoistureProxy(bdod: number): number {\r\n  if (!Number.isFinite(bdod)) {\r\n    return 0;\r\n  }\r\n  const density = bdod / 1000; // convert kg/m3 to g/cm3\r\n  if (density <= 0.8) {\r\n    return 60;\r\n  }\r\n  if (density < 1.05) {\r\n    return 80 + ((density - 0.8) / 0.25) * 20;\r\n  }\r\n  if (density <= 1.35) {\r\n    return 100;\r\n  }\r\n  if (density <= 1.6) {\r\n    return 100 - ((density - 1.35) / 0.25) * 30;\r\n  }\r\n  if (density <= 1.8) {\r\n    return 70 - ((density - 1.6) / 0.2) * 40;\r\n  }\r\n  return 20;\r\n}\r\n","export function scoreOrganicCarbon(orcdrc: number): number {\r\n  if (!Number.isFinite(orcdrc)) {\r\n    return 0;\r\n  }\r\n  const percent = orcdrc / 10; // convert g/kg to %\r\n  if (percent <= 0.5) {\r\n    return 5;\r\n  }\r\n  if (percent < 3) {\r\n    return Math.min(100, ((percent - 0.5) / 2.5) * 80 + 20);\r\n  }\r\n  if (percent <= 6) {\r\n    return 100;\r\n  }\r\n  if (percent <= 10) {\r\n    return 100 - ((percent - 6) / 4) * 50;\r\n  }\r\n  if (percent <= 15) {\r\n    return Math.max(20, 50 - ((percent - 10) / 5) * 50);\r\n  }\r\n  return 10;\r\n}\r\n","export function scorePh(ph: number): number {\r\n  if (!Number.isFinite(ph)) {\r\n    return 0;\r\n  }\r\n  const mu = 6.0;\r\n  const sigma = 0.6;\r\n  const exponent = -0.5 * ((ph - mu) / sigma) ** 2;\r\n  const score = Math.exp(exponent) * 100;\r\n  return Math.max(0, Math.min(100, score));\r\n}\r\n","export function scoreTexture(sand: number, clay: number, silt: number): number {\r\n  if (![sand, clay, silt].every((value) => Number.isFinite(value) && value >= 0)) {\r\n    return 0;\r\n  }\r\n  const sandPct = sand / 10;\r\n  const clayPct = clay / 10;\r\n  const siltPct = silt / 10;\r\n  const total = sandPct + clayPct + siltPct;\r\n  if (total <= 0) {\r\n    return 0;\r\n  }\r\n  const sandRatio = (sandPct / total) * 100;\r\n  const clayRatio = (clayPct / total) * 100;\r\n  const siltRatio = (siltPct / total) * 100;\r\n\r\n  let score = 100;\r\n  const sandDistance = Math.max(0, Math.abs(sandRatio - 45) - 10);\r\n  const clayDistance = Math.max(0, Math.abs(clayRatio - 25) - 6);\r\n  const siltDistance = Math.max(0, Math.abs(siltRatio - 30) - 10);\r\n\r\n  score -= sandDistance * 2.2;\r\n  score -= clayDistance * 2.8;\r\n  score -= siltDistance * 1.5;\r\n\r\n  if (sandRatio > 70) {\r\n    score -= (sandRatio - 70) * 2.8;\r\n  }\r\n  if (clayRatio > 45) {\r\n    score -= (clayRatio - 45) * 3.0;\r\n  }\r\n\r\n  return Math.max(0, Math.min(100, score));\r\n}\r\n","import { scoreMoistureProxy } from './moisture';\r\nimport { scoreOrganicCarbon } from './organicCarbon';\r\nimport { scorePh } from './ph';\r\nimport { LandClass } from './landcover';\r\nimport { scoreTexture } from './texture';\r\n\r\nexport const enum SuitabilityCategory {\r\n  Poor = 0,\r\n  Caution = 1,\r\n  Ideal = 2\r\n}\r\n\r\nexport interface SoilInputs {\r\n  ph: number;\r\n  orcdrc: number;\r\n  bdod: number;\r\n  sand: number;\r\n  clay: number;\r\n  silt: number;\r\n}\r\n\r\nexport interface SoilScoreBreakdown {\r\n  ph: number;\r\n  organic: number;\r\n  texture: number;\r\n  moisture: number;\r\n  overall: number;\r\n}\r\n\r\nconst COMPONENT_WEIGHTS = {\r\n  ph: 0.32,\r\n  organic: 0.22,\r\n  texture: 0.28,\r\n  moisture: 0.18\r\n} as const;\r\n\r\nfunction weightedAverage(entries: Array<{ score: number; weight: number }>): number {\r\n  let weightSum = 0;\r\n  let total = 0;\r\n  for (const entry of entries) {\r\n    if (Number.isFinite(entry.score)) {\r\n      total += entry.score * entry.weight;\r\n      weightSum += entry.weight;\r\n    }\r\n  }\r\n  if (weightSum === 0) {\r\n    return 0;\r\n  }\r\n  return total / weightSum;\r\n}\r\n\r\nexport function computeSoilScore(inputs: SoilInputs): SoilScoreBreakdown {\r\n  const phScore = scorePh(inputs.ph);\r\n  const organicScore = scoreOrganicCarbon(inputs.orcdrc);\r\n  const textureScore = scoreTexture(inputs.sand, inputs.clay, inputs.silt);\r\n  const moistureScore = scoreMoistureProxy(inputs.bdod);\r\n\r\n  const overall = weightedAverage([\r\n    { score: phScore, weight: COMPONENT_WEIGHTS.ph },\r\n    { score: organicScore, weight: COMPONENT_WEIGHTS.organic },\r\n    { score: textureScore, weight: COMPONENT_WEIGHTS.texture },\r\n    { score: moistureScore, weight: COMPONENT_WEIGHTS.moisture }\r\n  ]);\r\n\r\n  return {\r\n    ph: phScore,\r\n    organic: organicScore,\r\n    texture: textureScore,\r\n    moisture: moistureScore,\r\n    overall: Math.max(0, Math.min(100, overall))\r\n  };\r\n}\r\n\r\nexport function mapScoreToCategory(score: number, landClass: LandClass): SuitabilityCategory {\r\n  if (!Number.isFinite(score)) {\r\n    return SuitabilityCategory.Poor;\r\n  }\r\n  if (landClass === LandClass.Poor) {\r\n    return SuitabilityCategory.Poor;\r\n  }\r\n  const adjusted = landClass === LandClass.Caution ? score - 10 : score;\r\n  if (adjusted >= 70) {\r\n    return landClass === LandClass.Caution ? SuitabilityCategory.Caution : SuitabilityCategory.Ideal;\r\n  }\r\n  if (adjusted >= 45) {\r\n    return SuitabilityCategory.Caution;\r\n  }\r\n  return SuitabilityCategory.Poor;\r\n}\r\n","export class RunningAverage {\r\n  private total = 0;\r\n  private n = 0;\r\n\r\n  add(value: number) {\r\n    if (!Number.isFinite(value)) {\r\n      return;\r\n    }\r\n    this.total += value;\r\n    this.n += 1;\r\n  }\r\n\r\n  get count() {\r\n    return this.n;\r\n  }\r\n\r\n  get average() {\r\n    if (this.n === 0) {\r\n      return 0;\r\n    }\r\n    return this.total / this.n;\r\n  }\r\n}\r\n","/// <reference lib=\"webworker\" />\r\n\r\nimport type { SuitabilityWorkerInput, SuitabilityWorkerOutput } from '../types';\r\nimport { deriveLandCoverClasses, LandClass, WOODLAND_CODE } from '../scoring/landcover';\r\nimport { computeSoilScore, mapScoreToCategory, SuitabilityCategory } from '../scoring';\r\nimport { RunningAverage } from '../scoring/average';\r\n\r\nconst ctx: DedicatedWorkerGlobalScope = self as unknown as DedicatedWorkerGlobalScope;\r\n\r\nctx.onmessage = (event: MessageEvent<SuitabilityWorkerInput>) => {\r\n  const { soil, landCover, bbox, requestId } = event.data;\r\n  const width = Math.min(soil.width, landCover.width);\r\n  const height = Math.min(soil.height, landCover.height);\r\n  const codeLength = width * height;\r\n  const codes = landCover.codes.length === codeLength ? landCover.codes : landCover.codes.slice(0, codeLength);\r\n  const landClasses = deriveLandCoverClasses(codes, width, height);\r\n  const woodlandMask = new Uint8Array(width * height);\r\n  const scores = new Float32Array(width * height);\r\n  const categories = new Uint8Array(width * height);\r\n  const average = new RunningAverage();\r\n  const counts = {\r\n    ideal: 0,\r\n    caution: 0,\r\n    poor: 0\r\n  };\r\n\r\n  for (let idx = 0; idx < width * height; idx += 1) {\r\n    const breakdown = computeSoilScore({\r\n      ph: soil.data.phh2o[idx],\r\n      orcdrc: soil.data.orcdrc[idx],\r\n      bdod: soil.data.bdod[idx],\r\n      sand: soil.data.sand[idx],\r\n      clay: soil.data.clay[idx],\r\n      silt: soil.data.silt[idx]\r\n    });\r\n    const landClass = landClasses[idx] ?? LandClass.Poor;\r\n    const category = mapScoreToCategory(breakdown.overall, landClass);\r\n\r\n    scores[idx] = breakdown.overall;\r\n    categories[idx] = category;\r\n    woodlandMask[idx] = codes[idx] === WOODLAND_CODE ? 1 : 0;\r\n    average.add(breakdown.overall);\r\n\r\n    if (category === SuitabilityCategory.Ideal) {\r\n      counts.ideal += 1;\r\n    } else if (category === SuitabilityCategory.Caution) {\r\n      counts.caution += 1;\r\n    } else {\r\n      counts.poor += 1;\r\n    }\r\n  }\r\n\r\n  const payload: SuitabilityWorkerOutput = {\r\n    width,\r\n    height,\r\n    scores,\r\n    categories,\r\n    woodlandMask,\r\n    averageScore: average.average,\r\n    sampleCount: average.count,\r\n    countsByCategory: counts,\r\n    bbox,\r\n    requestId\r\n  };\r\n\r\n  ctx.postMessage(payload, [scores.buffer, categories.buffer, woodlandMask.buffer]);\r\n};\r\n"],"names":["LandClass","IDEAL_CODES","CAUTION_CODES","AVOID_CODES","WOODLAND_CODE","deriveLandCoverClasses","codes","width","height","classes","idx","code","y","x","neighbourIdeal","ny","nx","nIdx","scoreMoistureProxy","bdod","density","scoreOrganicCarbon","orcdrc","percent","scorePh","ph","exponent","score","scoreTexture","sand","clay","silt","value","sandPct","clayPct","siltPct","total","sandRatio","clayRatio","siltRatio","sandDistance","clayDistance","siltDistance","SuitabilityCategory","COMPONENT_WEIGHTS","weightedAverage","entries","weightSum","entry","computeSoilScore","inputs","phScore","organicScore","textureScore","moistureScore","overall","mapScoreToCategory","landClass","adjusted","RunningAverage","__publicField","ctx","event","soil","landCover","bbox","requestId","codeLength","landClasses","woodlandMask","scores","categories","average","counts","breakdown","category","payload"],"mappings":"6LAAO,IAAWA,GAAAA,IAChBA,EAAAA,EAAA,KAAO,CAAA,EAAP,OACAA,EAAAA,EAAA,QAAU,CAAA,EAAV,UACAA,EAAAA,EAAA,MAAQ,CAAA,EAAR,QAHgBA,IAAAA,GAAA,CAAA,CAAA,EAMlB,MAAMC,EAAc,IAAI,IAAI,CAAC,GAAI,GAAI,GAAG,CAAC,EACnCC,EAAgB,IAAI,IAAI,CAAC,GAAI,EAAE,CAAC,EAChCC,MAAkB,IAAI,CAAC,GAAI,GAAI,GAAI,GAAI,EAAE,CAAC,EACnCC,EAAgB,GAEtB,SAASC,EAAuBC,EAAmBC,EAAeC,EAA4B,CACnG,MAAMC,EAAU,IAAI,WAAWF,EAAQC,CAAM,EAE7C,QAASE,EAAM,EAAGA,EAAMJ,EAAM,OAAQI,GAAO,EAAG,CAC9C,MAAMC,EAAOL,EAAMI,CAAG,EAClBT,EAAY,IAAIU,CAAI,EACtBF,EAAQC,CAAG,EAAI,EACNP,EAAY,IAAIQ,CAAI,EAC7BF,EAAQC,CAAG,EAAI,GACNC,IAASP,GAETF,EAAc,IAAIS,CAAI,EAC/BF,EAAQC,CAAG,EAAI,EAInB,CAGA,QAASE,EAAI,EAAGA,EAAIJ,EAAQI,GAAK,EAC/B,QAASC,EAAI,EAAGA,EAAIN,EAAOM,GAAK,EAAG,CACjC,MAAMH,EAAME,EAAIL,EAAQM,EACxB,GAAIP,EAAMI,CAAG,IAAMN,EACjB,SAEF,IAAIU,EAAiB,GACrB,QAASC,EAAK,KAAK,IAAI,EAAGH,EAAI,CAAC,EAAGG,GAAM,KAAK,IAAIP,EAAS,EAAGI,EAAI,CAAC,GAAK,CAACE,EAAgBC,GAAM,EAC5F,QAASC,EAAK,KAAK,IAAI,EAAGH,EAAI,CAAC,EAAGG,GAAM,KAAK,IAAIT,EAAQ,EAAGM,EAAI,CAAC,EAAGG,GAAM,EAAG,CAC3E,GAAIA,IAAOH,GAAKE,IAAOH,EACrB,SAEF,MAAMK,EAAOF,EAAKR,EAAQS,EAC1B,GAAIP,EAAQQ,CAAI,IAAM,EAAiB,CACrCH,EAAiB,GACjB,KACF,CACF,CAEEA,IACFL,EAAQC,CAAG,EAAI,EAEnB,CAGF,OAAOD,CACT,CCxDO,SAASS,EAAmBC,EAAsB,CACvD,GAAI,CAAC,OAAO,SAASA,CAAI,EACvB,MAAO,GAET,MAAMC,EAAUD,EAAO,IACvB,OAAIC,GAAW,GACN,GAELA,EAAU,KACL,IAAOA,EAAU,IAAO,IAAQ,GAErCA,GAAW,KACN,IAELA,GAAW,IACN,KAAQA,EAAU,MAAQ,IAAQ,GAEvCA,GAAW,IACN,IAAOA,EAAU,KAAO,GAAO,GAEjC,EACT,CCrBO,SAASC,EAAmBC,EAAwB,CACzD,GAAI,CAAC,OAAO,SAASA,CAAM,EACzB,MAAO,GAET,MAAMC,EAAUD,EAAS,GACzB,OAAIC,GAAW,GACN,EAELA,EAAU,EACL,KAAK,IAAI,KAAOA,EAAU,IAAO,IAAO,GAAK,EAAE,EAEpDA,GAAW,EACN,IAELA,GAAW,GACN,KAAQA,EAAU,GAAK,EAAK,GAEjCA,GAAW,GACN,KAAK,IAAI,GAAI,IAAOA,EAAU,IAAM,EAAK,EAAE,EAE7C,EACT,CCrBO,SAASC,EAAQC,EAAoB,CAC1C,GAAI,CAAC,OAAO,SAASA,CAAE,EACrB,MAAO,GAIT,MAAMC,EAAW,MAASD,EAFf,GACG,KACiC,EACzCE,EAAQ,KAAK,IAAID,CAAQ,EAAI,IACnC,OAAO,KAAK,IAAI,EAAG,KAAK,IAAI,IAAKC,CAAK,CAAC,CACzC,CCTO,SAASC,EAAaC,EAAcC,EAAcC,EAAsB,CAC7E,GAAI,CAAC,CAACF,EAAMC,EAAMC,CAAI,EAAE,MAAOC,GAAU,OAAO,SAASA,CAAK,GAAKA,GAAS,CAAC,EAC3E,MAAO,GAET,MAAMC,EAAUJ,EAAO,GACjBK,EAAUJ,EAAO,GACjBK,EAAUJ,EAAO,GACjBK,EAAQH,EAAUC,EAAUC,EAClC,GAAIC,GAAS,EACX,MAAO,GAET,MAAMC,EAAaJ,EAAUG,EAAS,IAChCE,EAAaJ,EAAUE,EAAS,IAChCG,EAAaJ,EAAUC,EAAS,IAEtC,IAAIT,EAAQ,IACZ,MAAMa,EAAe,KAAK,IAAI,EAAG,KAAK,IAAIH,EAAY,EAAE,EAAI,EAAE,EACxDI,EAAe,KAAK,IAAI,EAAG,KAAK,IAAIH,EAAY,EAAE,EAAI,CAAC,EACvDI,EAAe,KAAK,IAAI,EAAG,KAAK,IAAIH,EAAY,EAAE,EAAI,EAAE,EAE9D,OAAAZ,GAASa,EAAe,IACxBb,GAASc,EAAe,IACxBd,GAASe,EAAe,IAEpBL,EAAY,KACdV,IAAUU,EAAY,IAAM,KAE1BC,EAAY,KACdX,IAAUW,EAAY,IAAM,GAGvB,KAAK,IAAI,EAAG,KAAK,IAAI,IAAKX,CAAK,CAAC,CACzC,CC1BO,IAAWgB,GAAAA,IAChBA,EAAAA,EAAA,KAAO,CAAA,EAAP,OACAA,EAAAA,EAAA,QAAU,CAAA,EAAV,UACAA,EAAAA,EAAA,MAAQ,CAAA,EAAR,QAHgBA,IAAAA,GAAA,CAAA,CAAA,EAuBlB,MAAMC,EAAoB,CACxB,GAAI,IACJ,QAAS,IACT,QAAS,IACT,SAAU,GACZ,EAEA,SAASC,EAAgBC,EAA2D,CAClF,IAAIC,EAAY,EACZX,EAAQ,EACZ,UAAWY,KAASF,EACd,OAAO,SAASE,EAAM,KAAK,IAC7BZ,GAASY,EAAM,MAAQA,EAAM,OAC7BD,GAAaC,EAAM,QAGvB,OAAID,IAAc,EACT,EAEFX,EAAQW,CACjB,CAEO,SAASE,EAAiBC,EAAwC,CACvE,MAAMC,EAAU3B,EAAQ0B,EAAO,EAAE,EAC3BE,EAAe/B,EAAmB6B,EAAO,MAAM,EAC/CG,EAAezB,EAAasB,EAAO,KAAMA,EAAO,KAAMA,EAAO,IAAI,EACjEI,EAAgBpC,EAAmBgC,EAAO,IAAI,EAE9CK,EAAUV,EAAgB,CAC9B,CAAE,MAAOM,EAAS,OAAQP,EAAkB,EAAA,EAC5C,CAAE,MAAOQ,EAAc,OAAQR,EAAkB,OAAA,EACjD,CAAE,MAAOS,EAAc,OAAQT,EAAkB,OAAA,EACjD,CAAE,MAAOU,EAAe,OAAQV,EAAkB,QAAA,CAAS,CAC5D,EAED,MAAO,CACL,GAAIO,EACJ,QAASC,EACT,QAASC,EACT,SAAUC,EACV,QAAS,KAAK,IAAI,EAAG,KAAK,IAAI,IAAKC,CAAO,CAAC,CAAA,CAE/C,CAEO,SAASC,EAAmB7B,EAAe8B,EAA2C,CAI3F,GAHI,CAAC,OAAO,SAAS9B,CAAK,GAGtB8B,IAAczD,EAAU,KAC1B,MAAO,GAET,MAAM0D,EAAWD,IAAczD,EAAU,QAAU2B,EAAQ,GAAKA,EAChE,OAAI+B,GAAY,GACPD,IAAczD,EAAU,QAAU,EAA8B,EAErE0D,GAAY,GACP,EAEF,CACT,CCxFO,MAAMC,CAAe,CAArB,cACGC,EAAA,aAAQ,GACRA,EAAA,SAAI,GAEZ,IAAI5B,EAAe,CACZ,OAAO,SAASA,CAAK,IAG1B,KAAK,OAASA,EACd,KAAK,GAAK,EACZ,CAEA,IAAI,OAAQ,CACV,OAAO,KAAK,CACd,CAEA,IAAI,SAAU,CACZ,OAAI,KAAK,IAAM,EACN,EAEF,KAAK,MAAQ,KAAK,CAC3B,CACF,CCfA,MAAM6B,EAAkC,KAExCA,EAAI,UAAaC,GAAgD,CAC/D,KAAM,CAAE,KAAAC,EAAM,UAAAC,EAAW,KAAAC,EAAM,UAAAC,CAAA,EAAcJ,EAAM,KAC7CvD,EAAQ,KAAK,IAAIwD,EAAK,MAAOC,EAAU,KAAK,EAC5CxD,EAAS,KAAK,IAAIuD,EAAK,OAAQC,EAAU,MAAM,EAC/CG,EAAa5D,EAAQC,EACrBF,EAAQ0D,EAAU,MAAM,SAAWG,EAAaH,EAAU,MAAQA,EAAU,MAAM,MAAM,EAAGG,CAAU,EACrGC,EAAc/D,EAAuBC,EAAOC,EAAOC,CAAM,EACzD6D,EAAe,IAAI,WAAW9D,EAAQC,CAAM,EAC5C8D,EAAS,IAAI,aAAa/D,EAAQC,CAAM,EACxC+D,EAAa,IAAI,WAAWhE,EAAQC,CAAM,EAC1CgE,EAAU,IAAIb,EACdc,EAAS,CACb,MAAO,EACP,QAAS,EACT,KAAM,CAAA,EAGR,QAAS/D,EAAM,EAAGA,EAAMH,EAAQC,EAAQE,GAAO,EAAG,CAChD,MAAMgE,EAAYzB,EAAiB,CACjC,GAAIc,EAAK,KAAK,MAAMrD,CAAG,EACvB,OAAQqD,EAAK,KAAK,OAAOrD,CAAG,EAC5B,KAAMqD,EAAK,KAAK,KAAKrD,CAAG,EACxB,KAAMqD,EAAK,KAAK,KAAKrD,CAAG,EACxB,KAAMqD,EAAK,KAAK,KAAKrD,CAAG,EACxB,KAAMqD,EAAK,KAAK,KAAKrD,CAAG,CAAA,CACzB,EACK+C,EAAYW,EAAY1D,CAAG,GAAKV,EAAU,KAC1C2E,EAAWnB,EAAmBkB,EAAU,QAASjB,CAAS,EAEhEa,EAAO5D,CAAG,EAAIgE,EAAU,QACxBH,EAAW7D,CAAG,EAAIiE,EAClBN,EAAa3D,CAAG,EAAIJ,EAAMI,CAAG,IAAMN,EAAgB,EAAI,EACvDoE,EAAQ,IAAIE,EAAU,OAAO,EAEzBC,IAAahC,EAAoB,MACnC8B,EAAO,OAAS,EACPE,IAAahC,EAAoB,QAC1C8B,EAAO,SAAW,EAElBA,EAAO,MAAQ,CAEnB,CAEA,MAAMG,EAAmC,CACvC,MAAArE,EACA,OAAAC,EACA,OAAA8D,EACA,WAAAC,EACA,aAAAF,EACA,aAAcG,EAAQ,QACtB,YAAaA,EAAQ,MACrB,iBAAkBC,EAClB,KAAAR,EACA,UAAAC,CAAA,EAGFL,EAAI,YAAYe,EAAS,CAACN,EAAO,OAAQC,EAAW,OAAQF,EAAa,MAAM,CAAC,CAClF"}