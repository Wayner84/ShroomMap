{"version":3,"file":"suitabilityWorker-C2zkbNxP.js","sources":["../src/types.ts","../src/scoring/landcover.ts","../src/scoring/moisture.ts","../src/scoring/organicCarbon.ts","../src/scoring/ph.ts","../src/scoring/texture.ts","../src/scoring/index.ts","../src/scoring/average.ts","../src/scoring/weather.ts","../src/workers/suitabilityWorker.ts"],"sourcesContent":["import type { BoundingBox } from './config';\r\n\r\nexport type SoilProperty =\r\n  | 'orcdrc'\r\n  | 'phh2o'\r\n  | 'bdod'\r\n  | 'sand'\r\n  | 'clay'\r\n  | 'silt';\r\n\r\nexport interface SoilGrid {\r\n  width: number;\r\n  height: number;\r\n  data: Record<SoilProperty, Float32Array>;\r\n  /** Unit metadata to aid conversion */\r\n  units: Record<SoilProperty, string>;\r\n}\r\n\r\nexport interface LandCoverGrid {\r\n  width: number;\r\n  height: number;\r\n  codes: Uint8Array;\r\n}\r\n\r\nexport interface WeatherGrid {\r\n  width: number;\r\n  height: number;\r\n  precipitation: Float32Array;\r\n  temperature: Float32Array;\r\n}\r\n\r\nexport interface SuitabilityResult {\r\n  width: number;\r\n  height: number;\r\n  scores: Float32Array;\r\n  categories: Uint8Array;\r\n  /** Number of cells sampled */\r\n  sampleCount: number;\r\n  /** Average score of sampled cells */\r\n  averageScore: number;\r\n  countsByCategory: {\r\n    ideal: number;\r\n    caution: number;\r\n    poor: number;\r\n  };\r\n}\r\n\r\nexport interface SuitabilityWorkerInput {\r\n  soil: SoilGrid;\r\n  landCover: LandCoverGrid;\r\n  weather?: WeatherGrid;\r\n  bbox: BoundingBox;\r\n  requestId: number;\r\n  config: {\r\n    includeWeather: boolean;\r\n  };\r\n}\r\n\r\nexport const enum WeatherOverlay {\r\n  Neutral = 0,\r\n  Dry = 1,\r\n  Favourable = 2\r\n}\r\n\r\nexport interface SuitabilityWorkerOutput extends SuitabilityResult {\r\n  bbox: BoundingBox;\r\n  requestId: number;\r\n  woodlandMask: Uint8Array;\r\n  weatherMask: Uint8Array;\r\n}\r\n","export const enum LandClass {\r\n  Poor = 0,\r\n  Caution = 1,\r\n  Ideal = 2\r\n}\r\n\r\nconst IDEAL_CODES = new Set([20, 30, 100]);\r\nconst CAUTION_CODES = new Set([90, 95]);\r\nconst AVOID_CODES = new Set([40, 50, 60, 70, 80]);\r\nexport const WOODLAND_CODE = 10;\r\n\r\nexport function deriveLandCoverClasses(codes: Uint8Array, width: number, height: number): Uint8Array {\r\n  const classes = new Uint8Array(width * height);\r\n\r\n  for (let idx = 0; idx < codes.length; idx += 1) {\r\n    const code = codes[idx];\r\n    if (IDEAL_CODES.has(code)) {\r\n      classes[idx] = LandClass.Ideal;\r\n    } else if (AVOID_CODES.has(code)) {\r\n      classes[idx] = LandClass.Poor;\r\n    } else if (code === WOODLAND_CODE) {\r\n      classes[idx] = LandClass.Caution;\r\n    } else if (CAUTION_CODES.has(code)) {\r\n      classes[idx] = LandClass.Caution;\r\n    } else {\r\n      classes[idx] = LandClass.Caution;\r\n    }\r\n  }\r\n\r\n  // Promote woodland edges that neighbour ideal clearings.\r\n  for (let y = 0; y < height; y += 1) {\r\n    for (let x = 0; x < width; x += 1) {\r\n      const idx = y * width + x;\r\n      if (codes[idx] !== WOODLAND_CODE) {\r\n        continue;\r\n      }\r\n      let neighbourIdeal = false;\r\n      for (let ny = Math.max(0, y - 1); ny <= Math.min(height - 1, y + 1) && !neighbourIdeal; ny += 1) {\r\n        for (let nx = Math.max(0, x - 1); nx <= Math.min(width - 1, x + 1); nx += 1) {\r\n          if (nx === x && ny === y) {\r\n            continue;\r\n          }\r\n          const nIdx = ny * width + nx;\r\n          if (classes[nIdx] === LandClass.Ideal) {\r\n            neighbourIdeal = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      if (neighbourIdeal) {\r\n        classes[idx] = LandClass.Ideal;\r\n      }\r\n    }\r\n  }\r\n\r\n  return classes;\r\n}\r\n","export function scoreMoistureProxy(bdod: number): number {\r\n  if (!Number.isFinite(bdod)) {\r\n    return 0;\r\n  }\r\n  const density = bdod / 1000; // convert kg/m3 to g/cm3\r\n  if (density <= 0.8) {\r\n    return 60;\r\n  }\r\n  if (density < 1.05) {\r\n    return 80 + ((density - 0.8) / 0.25) * 20;\r\n  }\r\n  if (density <= 1.35) {\r\n    return 100;\r\n  }\r\n  if (density <= 1.6) {\r\n    return 100 - ((density - 1.35) / 0.25) * 30;\r\n  }\r\n  if (density <= 1.8) {\r\n    return 70 - ((density - 1.6) / 0.2) * 40;\r\n  }\r\n  return 20;\r\n}\r\n","export function scoreOrganicCarbon(orcdrc: number): number {\r\n  if (!Number.isFinite(orcdrc)) {\r\n    return 0;\r\n  }\r\n  const percent = orcdrc / 10; // convert g/kg to %\r\n  if (percent <= 0.5) {\r\n    return 5;\r\n  }\r\n  if (percent < 3) {\r\n    return Math.min(100, ((percent - 0.5) / 2.5) * 80 + 20);\r\n  }\r\n  if (percent <= 6) {\r\n    return 100;\r\n  }\r\n  if (percent <= 10) {\r\n    return 100 - ((percent - 6) / 4) * 50;\r\n  }\r\n  if (percent <= 15) {\r\n    return Math.max(20, 50 - ((percent - 10) / 5) * 50);\r\n  }\r\n  return 10;\r\n}\r\n","export function scorePh(ph: number): number {\r\n  if (!Number.isFinite(ph)) {\r\n    return 0;\r\n  }\r\n  const mu = 6.0;\r\n  const sigma = 0.6;\r\n  const exponent = -0.5 * ((ph - mu) / sigma) ** 2;\r\n  const score = Math.exp(exponent) * 100;\r\n  return Math.max(0, Math.min(100, score));\r\n}\r\n","export function scoreTexture(sand: number, clay: number, silt: number): number {\r\n  if (![sand, clay, silt].every((value) => Number.isFinite(value) && value >= 0)) {\r\n    return 0;\r\n  }\r\n  const sandPct = sand / 10;\r\n  const clayPct = clay / 10;\r\n  const siltPct = silt / 10;\r\n  const total = sandPct + clayPct + siltPct;\r\n  if (total <= 0) {\r\n    return 0;\r\n  }\r\n  const sandRatio = (sandPct / total) * 100;\r\n  const clayRatio = (clayPct / total) * 100;\r\n  const siltRatio = (siltPct / total) * 100;\r\n\r\n  let score = 100;\r\n  const sandDistance = Math.max(0, Math.abs(sandRatio - 45) - 10);\r\n  const clayDistance = Math.max(0, Math.abs(clayRatio - 25) - 6);\r\n  const siltDistance = Math.max(0, Math.abs(siltRatio - 30) - 10);\r\n\r\n  score -= sandDistance * 2.2;\r\n  score -= clayDistance * 2.8;\r\n  score -= siltDistance * 1.5;\r\n\r\n  if (sandRatio > 70) {\r\n    score -= (sandRatio - 70) * 2.8;\r\n  }\r\n  if (clayRatio > 45) {\r\n    score -= (clayRatio - 45) * 3.0;\r\n  }\r\n\r\n  return Math.max(0, Math.min(100, score));\r\n}\r\n","import { scoreMoistureProxy } from './moisture';\r\nimport { scoreOrganicCarbon } from './organicCarbon';\r\nimport { scorePh } from './ph';\r\nimport { LandClass } from './landcover';\r\nimport { scoreTexture } from './texture';\r\n\r\nexport const enum SuitabilityCategory {\r\n  Poor = 0,\r\n  Caution = 1,\r\n  Ideal = 2\r\n}\r\n\r\nexport interface SoilInputs {\r\n  ph: number;\r\n  orcdrc: number;\r\n  bdod: number;\r\n  sand: number;\r\n  clay: number;\r\n  silt: number;\r\n}\r\n\r\nexport interface SoilScoreBreakdown {\r\n  ph: number;\r\n  organic: number;\r\n  texture: number;\r\n  moisture: number;\r\n  overall: number;\r\n}\r\n\r\nconst COMPONENT_WEIGHTS = {\r\n  ph: 0.32,\r\n  organic: 0.22,\r\n  texture: 0.28,\r\n  moisture: 0.18\r\n} as const;\r\n\r\nfunction weightedAverage(entries: Array<{ score: number; weight: number }>): number {\r\n  let weightSum = 0;\r\n  let total = 0;\r\n  for (const entry of entries) {\r\n    if (Number.isFinite(entry.score)) {\r\n      total += entry.score * entry.weight;\r\n      weightSum += entry.weight;\r\n    }\r\n  }\r\n  if (weightSum === 0) {\r\n    return 0;\r\n  }\r\n  return total / weightSum;\r\n}\r\n\r\nexport function computeSoilScore(inputs: SoilInputs): SoilScoreBreakdown {\r\n  const phScore = scorePh(inputs.ph);\r\n  const organicScore = scoreOrganicCarbon(inputs.orcdrc);\r\n  const textureScore = scoreTexture(inputs.sand, inputs.clay, inputs.silt);\r\n  const moistureScore = scoreMoistureProxy(inputs.bdod);\r\n\r\n  const overall = weightedAverage([\r\n    { score: phScore, weight: COMPONENT_WEIGHTS.ph },\r\n    { score: organicScore, weight: COMPONENT_WEIGHTS.organic },\r\n    { score: textureScore, weight: COMPONENT_WEIGHTS.texture },\r\n    { score: moistureScore, weight: COMPONENT_WEIGHTS.moisture }\r\n  ]);\r\n\r\n  return {\r\n    ph: phScore,\r\n    organic: organicScore,\r\n    texture: textureScore,\r\n    moisture: moistureScore,\r\n    overall: Math.max(0, Math.min(100, overall))\r\n  };\r\n}\r\n\r\nexport function mapScoreToCategory(score: number, landClass: LandClass): SuitabilityCategory {\r\n  if (!Number.isFinite(score)) {\r\n    return SuitabilityCategory.Poor;\r\n  }\r\n  if (landClass === LandClass.Poor) {\r\n    return SuitabilityCategory.Poor;\r\n  }\r\n  const adjusted = landClass === LandClass.Caution ? score - 10 : score;\r\n  if (adjusted >= 70) {\r\n    return landClass === LandClass.Caution ? SuitabilityCategory.Caution : SuitabilityCategory.Ideal;\r\n  }\r\n  if (adjusted >= 45) {\r\n    return SuitabilityCategory.Caution;\r\n  }\r\n  return SuitabilityCategory.Poor;\r\n}\r\n","export class RunningAverage {\r\n  private total = 0;\r\n  private n = 0;\r\n\r\n  add(value: number) {\r\n    if (!Number.isFinite(value)) {\r\n      return;\r\n    }\r\n    this.total += value;\r\n    this.n += 1;\r\n  }\r\n\r\n  get count() {\r\n    return this.n;\r\n  }\r\n\r\n  get average() {\r\n    if (this.n === 0) {\r\n      return 0;\r\n    }\r\n    return this.total / this.n;\r\n  }\r\n}\r\n","import { WeatherOverlay } from '../types';\r\n\r\nexport interface WeatherOverlayInput {\r\n  baseScore: number;\r\n  precipitation: number;\r\n  temperature: number;\r\n}\r\n\r\nexport interface WeatherOverlayResult {\r\n  adjustedScore: number;\r\n  overlay: WeatherOverlay;\r\n}\r\n\r\nconst PRECIP_MIN_MM = 0.2;\r\nconst PRECIP_IDEAL_MM = 4.2;\r\nconst PRECIP_MAX_MM = 10;\r\nconst PRECIP_FAVOURABLE_THRESHOLD = 4;\r\nconst PRECIP_DRY_THRESHOLD = 0.8;\r\n\r\nconst TEMP_MIN_C = 3;\r\nconst TEMP_IDEAL_C = 12;\r\nconst TEMP_MAX_C = 19;\r\n\r\nfunction clamp(value: number, min: number, max: number) {\r\n  return Math.min(max, Math.max(min, value));\r\n}\r\n\r\nfunction triangularScore(value: number, min: number, peak: number, max: number) {\r\n  if (!Number.isFinite(value) || max <= min || peak <= min || peak >= max) {\r\n    return 0;\r\n  }\r\n  if (value <= min || value >= max) {\r\n    return 0;\r\n  }\r\n  if (value === peak) {\r\n    return 1;\r\n  }\r\n  if (value < peak) {\r\n    return (value - min) / (peak - min);\r\n  }\r\n  return (max - value) / (max - peak);\r\n}\r\n\r\nfunction adjustForExtremes(precipitation: number, temperature: number, combinedScore: number) {\r\n  let modifier = 0;\r\n  let adjustedCombined = combinedScore;\r\n\r\n  if (precipitation < PRECIP_DRY_THRESHOLD) {\r\n    modifier -= clamp((PRECIP_DRY_THRESHOLD - precipitation) * 8, 0, 12);\r\n    adjustedCombined = Math.min(adjustedCombined, 0.3);\r\n  }\r\n\r\n  if (precipitation > PRECIP_MAX_MM) {\r\n    modifier -= clamp((precipitation - PRECIP_MAX_MM) * 2, 0, 6);\r\n  }\r\n\r\n  if (temperature < TEMP_MIN_C) {\r\n    modifier -= clamp((TEMP_MIN_C - temperature) * 1.8, 0, 10);\r\n    adjustedCombined = Math.min(adjustedCombined, 0.35);\r\n  }\r\n\r\n  if (temperature > 22) {\r\n    modifier -= clamp((temperature - 22) * 1.2, 0, 10);\r\n    adjustedCombined = Math.min(adjustedCombined, 0.4);\r\n  }\r\n\r\n  if (precipitation > PRECIP_FAVOURABLE_THRESHOLD && temperature >= 8 && temperature <= 16) {\r\n    modifier += 6;\r\n    adjustedCombined = Math.max(adjustedCombined, 0.7);\r\n  }\r\n\r\n  return { modifier, adjustedCombined };\r\n}\r\n\r\nexport function computeWeatherOverlay({\r\n  baseScore,\r\n  precipitation,\r\n  temperature\r\n}: WeatherOverlayInput): WeatherOverlayResult {\r\n  const safeBase = Number.isFinite(baseScore) ? baseScore : 0;\r\n\r\n  if (!Number.isFinite(precipitation) || !Number.isFinite(temperature)) {\r\n    return { adjustedScore: clamp(safeBase, 0, 100), overlay: WeatherOverlay.Neutral };\r\n  }\r\n\r\n  const precipitationScore = triangularScore(precipitation, PRECIP_MIN_MM, PRECIP_IDEAL_MM, PRECIP_MAX_MM);\r\n  const temperatureScore = triangularScore(temperature, TEMP_MIN_C, TEMP_IDEAL_C, TEMP_MAX_C);\r\n\r\n  const combinedBase = precipitationScore * 0.65 + temperatureScore * 0.35;\r\n  const { modifier: extremeModifier, adjustedCombined } = adjustForExtremes(\r\n    precipitation,\r\n    temperature,\r\n    combinedBase\r\n  );\r\n\r\n  const combinedScore = clamp(adjustedCombined, 0, 1);\r\n  const combinedModifier = (combinedScore - 0.5) * 26;\r\n\r\n  const adjustedScore = clamp(safeBase + combinedModifier + extremeModifier, 0, 100);\r\n\r\n  let overlay = WeatherOverlay.Neutral;\r\n  if (precipitation <= PRECIP_DRY_THRESHOLD || combinedScore < 0.32) {\r\n    overlay = WeatherOverlay.Dry;\r\n  } else if (precipitation >= PRECIP_FAVOURABLE_THRESHOLD && combinedScore >= 0.65 && temperatureScore > 0.45) {\r\n    overlay = WeatherOverlay.Favourable;\r\n  }\r\n\r\n  return { adjustedScore, overlay };\r\n}\r\n","/// <reference lib=\"webworker\" />\r\n\r\nimport type { SuitabilityWorkerInput, SuitabilityWorkerOutput } from '../types';\r\nimport { WeatherOverlay } from '../types';\r\nimport { deriveLandCoverClasses, LandClass, WOODLAND_CODE } from '../scoring/landcover';\r\nimport { computeSoilScore, mapScoreToCategory, SuitabilityCategory } from '../scoring';\r\nimport { RunningAverage } from '../scoring/average';\r\nimport { computeWeatherOverlay } from '../scoring/weather';\r\n\r\nconst ctx: DedicatedWorkerGlobalScope = self as unknown as DedicatedWorkerGlobalScope;\r\n\r\nctx.onmessage = (event: MessageEvent<SuitabilityWorkerInput>) => {\r\n  const { soil, landCover, weather, bbox, requestId, config } = event.data;\r\n  const weatherGrid = config?.includeWeather && weather ? weather : null;\r\n  const width = Math.min(soil.width, landCover.width, weatherGrid ? weatherGrid.width : soil.width);\r\n  const height = Math.min(soil.height, landCover.height, weatherGrid ? weatherGrid.height : soil.height);\r\n  const codeLength = width * height;\r\n  const codes = landCover.codes.length === codeLength ? landCover.codes : landCover.codes.slice(0, codeLength);\r\n  const landClasses = deriveLandCoverClasses(codes, width, height);\r\n  const woodlandMask = new Uint8Array(width * height);\r\n  const weatherMask = new Uint8Array(width * height);\r\n  const scores = new Float32Array(width * height);\r\n  const categories = new Uint8Array(width * height);\r\n  const average = new RunningAverage();\r\n  const counts = {\r\n    ideal: 0,\r\n    caution: 0,\r\n    poor: 0\r\n  };\r\n\r\n  const precipitation = weatherGrid ? weatherGrid.precipitation : null;\r\n  const temperature = weatherGrid ? weatherGrid.temperature : null;\r\n  const weatherLength =\r\n    weatherGrid && precipitation && temperature\r\n      ? Math.min(precipitation.length, temperature.length, width * height)\r\n      : 0;\r\n  const useWeather = !!weatherGrid && !!precipitation && !!temperature && weatherLength > 0;\r\n\r\n  for (let idx = 0; idx < width * height; idx += 1) {\r\n    const breakdown = computeSoilScore({\r\n      ph: soil.data.phh2o[idx],\r\n      orcdrc: soil.data.orcdrc[idx],\r\n      bdod: soil.data.bdod[idx],\r\n      sand: soil.data.sand[idx],\r\n      clay: soil.data.clay[idx],\r\n      silt: soil.data.silt[idx]\r\n    });\r\n    const landClass = landClasses[idx] ?? LandClass.Poor;\r\n    let effectiveScore = breakdown.overall;\r\n    let overlay = WeatherOverlay.Neutral;\r\n\r\n    if (useWeather && idx < weatherLength) {\r\n      const weatherResult = computeWeatherOverlay({\r\n        baseScore: breakdown.overall,\r\n        precipitation: precipitation![idx],\r\n        temperature: temperature![idx]\r\n      });\r\n      effectiveScore = weatherResult.adjustedScore;\r\n      overlay = weatherResult.overlay;\r\n    }\r\n\r\n    const category = mapScoreToCategory(effectiveScore, landClass);\r\n\r\n    scores[idx] = effectiveScore;\r\n    categories[idx] = category;\r\n    woodlandMask[idx] = codes[idx] === WOODLAND_CODE ? 1 : 0;\r\n    weatherMask[idx] = overlay;\r\n    average.add(effectiveScore);\r\n\r\n    if (category === SuitabilityCategory.Ideal) {\r\n      counts.ideal += 1;\r\n    } else if (category === SuitabilityCategory.Caution) {\r\n      counts.caution += 1;\r\n    } else {\r\n      counts.poor += 1;\r\n    }\r\n  }\r\n\r\n  const payload: SuitabilityWorkerOutput = {\r\n    width,\r\n    height,\r\n    scores,\r\n    categories,\r\n    woodlandMask,\r\n    weatherMask,\r\n    averageScore: average.average,\r\n    sampleCount: average.count,\r\n    countsByCategory: counts,\r\n    bbox,\r\n    requestId\r\n  };\r\n\r\n  ctx.postMessage(payload, [scores.buffer, categories.buffer, woodlandMask.buffer, weatherMask.buffer]);\r\n};\r\n"],"names":["WeatherOverlay","LandClass","IDEAL_CODES","CAUTION_CODES","AVOID_CODES","WOODLAND_CODE","deriveLandCoverClasses","codes","width","height","classes","idx","code","y","x","neighbourIdeal","ny","nx","nIdx","scoreMoistureProxy","bdod","density","scoreOrganicCarbon","orcdrc","percent","scorePh","ph","exponent","score","scoreTexture","sand","clay","silt","value","sandPct","clayPct","siltPct","total","sandRatio","clayRatio","siltRatio","sandDistance","clayDistance","siltDistance","SuitabilityCategory","COMPONENT_WEIGHTS","weightedAverage","entries","weightSum","entry","computeSoilScore","inputs","phScore","organicScore","textureScore","moistureScore","overall","mapScoreToCategory","landClass","adjusted","RunningAverage","__publicField","PRECIP_MIN_MM","PRECIP_IDEAL_MM","PRECIP_MAX_MM","PRECIP_FAVOURABLE_THRESHOLD","PRECIP_DRY_THRESHOLD","TEMP_MIN_C","TEMP_IDEAL_C","TEMP_MAX_C","clamp","min","max","triangularScore","peak","adjustForExtremes","precipitation","temperature","combinedScore","modifier","adjustedCombined","computeWeatherOverlay","baseScore","safeBase","precipitationScore","temperatureScore","combinedBase","extremeModifier","combinedModifier","adjustedScore","overlay","ctx","event","soil","landCover","weather","bbox","requestId","config","weatherGrid","codeLength","landClasses","woodlandMask","weatherMask","scores","categories","average","counts","weatherLength","useWeather","breakdown","effectiveScore","weatherResult","category","payload"],"mappings":"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"}